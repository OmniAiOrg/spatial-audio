{"version":3,"sources":["js/helper.js","js/cs_audio.js"],"names":["print","names","values","str","name","value","Number","toFixed","AudioContext","window","webkitAudioContext","audioCtx","listener","n1","n2","n3","n4","n5","n6","n7","n8","analysers","music_event","CustomEvent","init","audioElements","positionX","positionY","positionZ","setPosition","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","pannerModel","innerCone","outerCone","outerGain","distanceModel","maxDistance","refDistance","rollOff","orientationX","orientationY","orientationZ","panner","pos","PannerNode","panningModel","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","addEventListener","event","document","querySelector","global_up","point_up","global_forward","point_forward","track","createMediaElementSource","channels7","splitterNode","ChannelSplitterNode","numberOfOutputs","connect","audioPack","playElement","gain","order","createAnalyser","gainNode","createGain","children","classList","remove","add","destination","setInterval","updateWave","dataArray","Uint8Array","frequencyBinCount","maxValues","i","length","getByteTimeDomainData","maxValue","num","Math","max","style","backgroundColor","min","a1","a2","arraysEqual","dispatchEvent","playAudio","thisButton","audioElement","state","resume","dataset","playing","play","getEl","pause","getAttribute","setAttribute","id","getElementById","a3","a4","a5","a6","a7","a8","playAll","chooseAudio","replaceWith","cloneNode","stopPlayAll","aim","display","fileList","files","url","URL","createObjectURL","src"],"mappings":"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","file":"cs_audio.1c373f46.js","sourceRoot":"..","sourcesContent":["export function print(names, values) {\n  // console.log(values);\n  let str = '';\n  for (let name of names.values()) {\n    str += name+'\\t';\n  }\n  str += '\\n';\n  for (let value of values.values()) {\n    str += Number(value).toFixed(2)+'\\t';\n  }\n  str += '\\n';\n\n  return str;\n}\n\n","import {print} from './helper.js'\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nlet audioCtx;\nlet listener;\nlet n1, n2, n3, n4, n5, n6, n7, n8;\nlet analysers = [n1, n2, n3, n4, n5, n6, n7, n8];\nlet music_event = new CustomEvent('music', { 'detail': '' });\nmusic_event.maxValues = [0,0,0,0,0,0,0,0];\nfunction init(audioElements) {\n\n  audioCtx = new AudioContext();\n  listener = audioCtx.listener;\n\n  // Let's set the position of our listener based on where our boombox is.\n  const posX = 0;\n  const posY = 0;\n  const posZ = 0;\n\n  // set position of the listener\n  if(listener.positionX) {\n    listener.positionX.value = posX;\n    listener.positionY.value = posY;\n    listener.positionZ.value = posZ;\n  } else {\n    listener.setPosition(posX, posY, posZ);\n  }\n  // set the orientation of the head of listener\n  if(listener.forwardX) {\n    listener.forwardX.value = 0;\n    listener.forwardY.value = 0;\n    listener.forwardZ.value = -1;\n    listener.upX.value = 0;\n    listener.upY.value = 1;\n    listener.upZ.value = 0;\n  } else {\n    listener.setOrientation(0, 0, -1, 0, 1, 0);\n  }\n\n  const pannerModel = 'HRTF';\n\n  const innerCone = 40;\n  const outerCone = 50;\n  const outerGain = 1; // omnisource\n  const distanceModel = 'linear';\n  const maxDistance = 20000;\n  const refDistance = 1;\n\n  const rollOff = 0.9;\n\n  const positionX = posX;\n  const positionY = posY;\n  const positionZ = posZ;\n\n  const orientationX = 0.0;\n  const orientationY = 0.0;\n  const orientationZ = 1.0;\n\n  // let's use the class method for creating our panner node and pass in all those parameters we've set.\n\n  function panner(pos) {\n    return new PannerNode(audioCtx, {\n      panningModel: pannerModel,\n      distanceModel: distanceModel,\n      positionX: positionX+pos[0],\n      positionY: positionY+pos[1],\n      positionZ: positionZ+pos[2],\n      orientationX: orientationX,\n      orientationY: orientationY,\n      orientationZ: orientationZ,\n      refDistance: refDistance,\n      maxDistance: maxDistance,\n      rolloffFactor: rollOff,\n      coneInnerAngle: innerCone,\n      coneOuterAngle: outerCone,\n      coneOuterGain: outerGain\n    })\n  }\n\n  // listen on the face angle change from cs_face_orientation.js\n  window.addEventListener('build', function (event) {\n    const info = document.querySelector('.info');\n\n    let global_up = event.point_up;\n    let global_forward = event.point_forward;\n\n    // info.textContent = print(['u: x','y','z'],global_up);\n    // info.textContent += print(['f: x','y','z'],global_forward);\n    // Change the position of head and recalculate the volume on each ear\n\n    listener.forwardX.value = global_forward[0];\n    listener.forwardY.value = global_forward[1];\n    listener.forwardZ.value = global_forward[2];\n    listener.upX.value = global_up[0];\n    listener.upY.value = global_up[1];\n    listener.upZ.value = global_up[2];\n    // console.log('up',global_up);\n    // console.log('forward',global_forward);\n    // indicator.style.left  = (-maxY*(y-90)/180 - 10) + \"px\";\n    // indicator.style.top = (-maxX*(x-90)/180 - 10) + \"px\";\n    // indicator.style.transform = \"rotate(\"+z+\"deg)\";\n  });\n\n  const track = audioCtx.createMediaElementSource(channels7);\n  const channelsCount = 8;\n  const splitterNode = new ChannelSplitterNode(audioCtx, { numberOfOutputs: channelsCount });\n  track.connect(splitterNode);\n\n  // const mergerNode = new ChannelMergerNode(audioCtx, { numberOfInputs: channelsCount });\n\n  for (let audioPack of audioElements) {\n    // add each track to the IMU control\n    let playElement = audioPack[0];\n    let pos = audioPack[1];\n    let gain = audioPack[2];\n    let order = audioPack[3];\n    analysers[order] = audioCtx.createAnalyser();\n    // let analyser = analysers[order];\n    // console.log(pos);\n    const gainNode = audioCtx.createGain();\n    gainNode.gain.value = gain;\n    playElement.addEventListener('click', function() {\n      if (gainNode.gain.value === 0) {\n        playElement.children[0].classList.remove(\"slash\");\n        gainNode.gain.value = 1;\n      } else {\n        playElement.children[0].classList.add(\"slash\");\n        gainNode.gain.value = 0;\n      }\n    }, false);\n    // const pannerOptions = {pan: 0};\n    // const stereoPanner = new StereoPannerNode(audioCtx, pannerOptions);\n    splitterNode.connect(gainNode, order).connect(analysers[order]).connect(panner(pos)).connect(audioCtx.destination);\n    }\n\n  function updateWave() {\n    let dataArray = new Uint8Array(analysers[0].frequencyBinCount);\n    let maxValues = [null, null, null, null, null, null, null, null];\n    for (let i = 0; i < analysers.length; i ++) {\n      analysers[i].getByteTimeDomainData(dataArray);\n      let maxValue = 128;\n      for (let num of dataArray) {\n        if (num > maxValue) {\n          maxValue = num;\n        }\n      }\n      maxValue = Math.max(0, maxValue - 128);\n      maxValues[i] = maxValue;\n      audioElements[i][0].style.backgroundColor = \"rgb(\"+Math.min(255, -maxValue * 20+224)+\", 225, \"+\n        Math.min(255, maxValue * 10+226)+\")\";\n    }\n    const arraysEqual = (a1, a2) => {\n      for (let i = 0; i < 8; i++) {\n        if (a1[i] !== a2[i]) {return false;}\n      }\n      return true;\n    }\n    if (!arraysEqual(maxValues, music_event.maxValues)) {\n      music_event.maxValues = maxValues;\n      // console.log(maxValues);\n      window.dispatchEvent(music_event);\n    }\n  }\n  setInterval(updateWave, 50);\n}\n\n\nfunction playAudio(thisButton, audioElement) {\n  if(!audioCtx) {\n    init(audioElements);\n  }\n\n  if (audioCtx.state === 'suspended') {\n    audioCtx.resume();\n  }\n\n  if (thisButton.dataset.playing === 'false') {\n    var playPromise = audioElement.play();\n    thisButton.dataset.playing = 'true';\n    getEl('startPlay').style.backgroundColor = 'rgb(54,146,220)';\n    // if track is playing pause it\n  } else if (thisButton.dataset.playing === 'true') {\n    audioElement.pause();\n    thisButton.dataset.playing = 'false';\n    getEl('startPlay').style.backgroundColor = 'rgb(225,226,226)';\n  }\n\n  let state = thisButton.getAttribute('aria-checked') === \"true\";\n  thisButton.setAttribute( 'aria-checked', state ? \"false\" : \"true\" );\n}\n\nconst getEl = (id) => document.getElementById(id);\nconst a1 = [getEl('b1'), [-5, 0,-5], 1, 0]; // FL\nconst a2 = [getEl('b2'), [5, 0, -5], 1, 1]; // FR\nconst a3 = [getEl('b3'), [0, 0, -5], 1, 2]; // C\nconst a4 = [getEl('b4'), [0, 0,  0], 0, 3]; // LFE (mute by default)\nconst a5 = [getEl('b5'), [-5, 0, 5], 1, 4]; // BL\nconst a6 = [getEl('b6'), [5, 0,  5], 1, 5]; // BR\nconst a7 = [getEl('b7'), [-5, 0, 0], 1, 6]; // SL\nconst a8 = [getEl('b8'), [ 5, 0, 0], 1, 7]; // SR\nconst audioElements = [a1, a2, a3, a4, a5, a6, a7, a8];\n\n\nlet playAll = getEl('startPlay');\nlet channels7;\n\nfunction chooseAudio(id){\n  channels7 = getEl(id);\n  channels7.replaceWith(channels7.cloneNode(true)); // we must use a new element\n  channels7 = getEl(id);\n  playAll.addEventListener('click', function () {\n    // console.log('id', id);\n    playAudio(this, channels7);\n  }, false)\n}\n\nchooseAudio('channels7'); // default\n\nfunction stopPlayAll() {\n  let thisButton = getEl('startPlay');\n  if (thisButton.dataset.playing === 'true') {\n    channels7.pause();\n    thisButton.dataset.playing = 'false';\n    getEl('startPlay').style.backgroundColor = 'rgb(225,226,226)';\n  }\n}\n\ngetEl('audio1').addEventListener('click', function () {\n  stopPlayAll();\n  const id = this.dataset.aim;\n  audioCtx = null;\n  playAll.replaceWith(playAll.cloneNode(true)); // we must use a new element\n  playAll = getEl('startPlay');\n  // console.log(id);\n  chooseAudio(id);\n  getEl('AllowLocalFile').style.display = \"none\";\n})\n\ngetEl('audio2').addEventListener('click', function () {\n  stopPlayAll();\n  const id = this.dataset.aim;\n  audioCtx = null;\n  playAll.replaceWith(playAll.cloneNode(true)); // we must use a new element\n  playAll = getEl('startPlay');\n  // console.log(id);\n  chooseAudio(id);\n  getEl('AllowLocalFile').style.display = \"none\";\n})\n\ngetEl('audioLocal').addEventListener('click', function (){\n  stopPlayAll();\n  getEl('AllowLocalFile').style.display = \"block\";\n})\n\ngetEl(\"inputFile\").addEventListener(\"change\", function () {\n  stopPlayAll();\n  var fileList = this.files;\n  // console.log(fileList);\n  if (fileList.length >0) {\n    audioCtx = null;\n    playAll.replaceWith(playAll.cloneNode(true)); // we must use a new element\n    playAll = getEl('startPlay');\n    let url = window.URL.createObjectURL(fileList[0]);\n    getEl('aimLocalAudio').src = url;\n    channels7 = getEl('aimLocalAudio');\n    playAll.addEventListener('click', function () {\n      // console.log('url', url);\n      playAudio(this, channels7);\n    }, false)\n  }\n}, false);\n"]}