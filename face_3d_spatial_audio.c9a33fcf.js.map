{"version":3,"sources":["js/helper.js","js/face_3d_spatial_audio.js"],"names":["print","names","values","str","value","Number","toFixed","audioCtx","listener","AudioContext","window","webkitAudioContext","init","audioElements","positionX","positionY","positionZ","setPosition","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","pannerModel","innerCone","outerCone","outerGain","distanceModel","maxDistance","refDistance","rollOff","orientationX","orientationY","orientationZ","panner","pos","PannerNode","panningModel","rolloffFactor","coneInnerAngle","coneOuterAngle","coneOuterGain","addEventListener","event","info","document","querySelector","global_up","point_up","global_forward","point_forward","textContent","console","log","audioPack","audioElement","gain","track","createMediaElementSource","gainNode","createGain","pannerOptions","stereoPanner","StereoPannerNode","pan","connect","destination","playAudio","this_button","state","resume","dataset","playing","play","pause","getAttribute","setAttribute","getEl","id","getElementById","a1","a2","a3","playButton1","playButton2","playButton3","playAll"],"mappings":"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","file":"face_3d_spatial_audio.c9a33fcf.js","sourceRoot":"..","sourcesContent":["export function print(names, values) {\n  // console.log(values);\n  let str = '';\n  for (let name of names.values()) {\n    str += name+'\\t';\n  }\n  str += '\\n';\n  for (let value of values.values()) {\n    str += Number(value).toFixed(2)+'\\t';\n  }\n  str += '\\n';\n\n  return str;\n}\n\n","import {print} from './helper.js'\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nlet audioCtx;\nlet listener;\n// const indicator = document.querySelector('.indicator');\n// const garden = document.querySelector('.garden');\n// const maxX = garden.clientWidth - indicator.clientWidth;\n// const maxY = garden.clientHeight - indicator.clientHeight;\nfunction init(audioElements) {\n\n  audioCtx = new AudioContext();\n  listener = audioCtx.listener;\n\n  // Let's set the position of our listener based on where our boombox is.\n  const posX = 0;\n  const posY = 0;\n  const posZ = 0;\n\n  // set position of the listener\n  if(listener.positionX) {\n    listener.positionX.value = posX;\n    listener.positionY.value = posY;\n    listener.positionZ.value = posZ;\n  } else {\n    listener.setPosition(posX, posY, posZ);\n  }\n  // set the orientation of the head of listener\n  if(listener.forwardX) {\n    listener.forwardX.value = 0;\n    listener.forwardY.value = 0;\n    listener.forwardZ.value = -1;\n    listener.upX.value = 0;\n    listener.upY.value = 1;\n    listener.upZ.value = 0;\n  } else {\n    listener.setOrientation(0, 0, -1, 0, 1, 0);\n  }\n\n  const pannerModel = 'HRTF';\n\n  const innerCone = 40;\n  const outerCone = 50;\n  const outerGain = 1; // omnisource\n  const distanceModel = 'linear';\n  const maxDistance = 20000;\n  const refDistance = 1;\n\n  const rollOff = 0.9;\n\n  const positionX = posX;\n  const positionY = posY;\n  const positionZ = posZ;\n\n  const orientationX = 0.0;\n  const orientationY = 0.0;\n  const orientationZ = 1.0;\n\n  // let's use the class method for creating our panner node and pass in all those parameters we've set.\n\n  function panner(pos) {\n    return new PannerNode(audioCtx, {\n      panningModel: pannerModel,\n      distanceModel: distanceModel,\n      positionX: positionX+pos[0],\n      positionY: positionY+pos[1],\n      positionZ: positionZ+pos[2],\n      orientationX: orientationX,\n      orientationY: orientationY,\n      orientationZ: orientationZ,\n      refDistance: refDistance,\n      maxDistance: maxDistance,\n      rolloffFactor: rollOff,\n      coneInnerAngle: innerCone,\n      coneOuterAngle: outerCone,\n      coneOuterGain: outerGain\n    })\n  }\n  //             [alpha, beta, gamma]\n  //               [z, x, y] according to https://www.w3.org/TR/orientation-event/\n  // let init_flags = [0, 0, 0];\n  // let init_values = [0, 0, 0];\n  // let prev_values = [0, 0, 0];\n  // let diff_values = [0, 0, 0];\n  if (true) {\n    window.addEventListener('build', function (event) {\n      const info = document.querySelector('.info');\n\n      // let z = event.alpha,\n      //   x = event.beta,\n      //   y = event.gamma;\n      // // console.log(x+\",\"+y+\",\"+z);\n      // let values = [z, x, y];\n      // let exist_large_diff = 0;\n      // const drop_size_for_calibration = 2;\n      // for (let i = 0; i < 3; i ++) {\n      //   if (init_flags[i] < drop_size_for_calibration) {\n      //     init_flags[i] += 1;\n      //     init_values[i] = values[i];\n      //   }\n      //   diff_values[i] = values[i] - init_values[i];\n      //   if (Math.abs(prev_values[i] - diff_values[i]) > 1) {\n      //     exist_large_diff = 1;\n      //   }\n      // }\n      // if (exist_large_diff === 0) {\n      //   return;\n      // }\n      // prev_values[0] = diff_values[0];\n      // prev_values[1] = diff_values[1];\n      // prev_values[2] = diff_values[2];\n      //\n      // z = diff_values[0];\n      // // x = diff_values[1];\n      // // y = diff_values[2];\n      //\n      // let Sx = Math.sin(x/180 * Math.PI),\n      //   Sy = Math.sin(y/180 * Math.PI),\n      //   Sz = Math.sin(z/180 * Math.PI),\n      //   Cx = Math.cos(x/180 * Math.PI),\n      //   Cy = Math.cos(y/180 * Math.PI),\n      //   Cz = Math.cos(z/180 * Math.PI);\n      // let Xx=Cy*Cz-Sx*Sy*Sz,\n      //   Yx=-Cx*Sz,\n      //   Zx=Cz*Sy+Cy*Sx*Sz,\n      //   Xy=Cz*Sx*Sy+Cy*Sz,\n      //   Yy=Cx*Cz,\n      //   Zy=-Cy*Cz*Sx+Sy*Sz,\n      //   Xz=-Cx*Sy,\n      //   Yz=Sx,\n      //   Zz=Cx*Cy;\n      let global_up = event.point_up;\n      let global_forward = event.point_forward;\n\n      info.textContent = print(['u: x','y','z'],global_up);\n      info.textContent += print(['f: x','y','z'],global_forward);\n      // Change the position of head and recalculate the volume on each ear\n\n      listener.forwardX.value = global_forward[0];\n      listener.forwardY.value = global_forward[1];\n      listener.forwardZ.value = global_forward[2];\n      listener.upX.value = global_up[0];\n      listener.upY.value = global_up[1];\n      listener.upZ.value = global_up[2];\n      console.log('up',global_up);\n      console.log('forward',global_forward);\n      // indicator.style.left  = (-maxY*(y-90)/180 - 10) + \"px\";\n      // indicator.style.top = (-maxX*(x-90)/180 - 10) + \"px\";\n      // indicator.style.transform = \"rotate(\"+z+\"deg)\";\n    });\n  }\n\n  for (let audioPack of audioElements) {\n    // add each track to the IMU control\n    let audioElement =  audioPack[0];\n    let pos = audioPack[1];\n    let gain = audioPack[2];\n    console.log(pos);\n    const track = audioCtx.createMediaElementSource(audioElement);\n    const gainNode = audioCtx.createGain();\n    gainNode.gain.value = gain;\n    const pannerOptions = {pan: 0};\n    const stereoPanner = new StereoPannerNode(audioCtx, pannerOptions);\n    track.connect(gainNode).connect(stereoPanner).connect(panner(pos)).connect(audioCtx.destination);\n  }\n}\n\n\nfunction playAudio(this_button, audioElement) {\n  if(!audioCtx) {\n    init(audioElements);\n  }\n\n  if (audioCtx.state === 'suspended') {\n    audioCtx.resume();\n  }\n\n  if (this_button.dataset.playing === 'false') {\n    audioElement.play();\n    this_button.dataset.playing = 'true';\n    // if track is playing pause it\n  } else if (this_button.dataset.playing === 'true') {\n    audioElement.pause();\n    this_button.dataset.playing = 'false';\n  }\n\n  let state = this_button.getAttribute('aria-checked') === \"true\";\n  this_button.setAttribute( 'aria-checked', state ? \"false\" : \"true\" );\n\n}\n\nconst getEl = (id) => document.getElementById(id);\nconst a1 = [getEl('a1'), [0,0,-5], 0.4]; // front\nconst a2 = [getEl('a2'), [5, 0, 0], 0.8]; // right\nconst a3 = [getEl('a3'), [-5, 0, 0], 0.9]; // left\nconst audioElements = [a1, a2, a3]\nconst playButton1 = getEl('b1');\nplayButton1.addEventListener('click', function () {playAudio(this, a1[0])}, false);\n\nconst playButton2 = getEl('b2');\nplayButton2.addEventListener('click', function () {playAudio(this, a2[0])}, false);\n\nconst playButton3 = getEl('b3');\nplayButton3.addEventListener('click', function () {playAudio(this, a3[0])}, false);\n\nconst playAll = getEl('all');\nplayAll.addEventListener('click', function () {\n  playAudio(playButton1, a1[0]);\n  playAudio(playButton2, a2[0]);\n  playAudio(playButton3, a3[0]);\n}, false)\n"]}